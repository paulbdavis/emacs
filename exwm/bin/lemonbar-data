#!/usr/bin/env bash

updatecount=0

function get_workspace () {
    emacsclient --eval 'exwm-workspace-current-index' 2>&1
}

function get_clock () {
    date +"%Y.%m.%d %l:%M %p %Z"
}

function get_uptime_data () {
    uptime -p | sed -r \
                    -e 's/up/Uptime:/' \
                    -e 's/ weeks?,?/w/' \
                    -e 's/ days?,?/d/' \
                    -e 's/ hours?,?/h/' \
                    -e 's/ minutes?,?/m/' \
                    -e 's/ seconds?,?/s/'
}


function get_cpu_load () {
    cat /proc/loadavg | awk '{print "Load: "$1" "$2" "$3}'
}

function get_memory () {
    FREEOUT="$(free -b)"
    TOTAL="$(echo "$FREEOUT" | grep Mem | awk '{print $2}')"
    USED="$(echo "$FREEOUT" | grep Mem | awk '{print $3}')"
    PERCENT=$(bc <<<"scale=0; (100*$USED)/$TOTAL")

    SCALE=0

    while [[ $(bc <<<"$USED >= 1024") -eq 1 ]]
    do
        USED=$(bc <<<"scale=2; $USED / 1024")
        SCALE=$((SCALE+1))
    done

    case $SCALE in
        1) USEDUNIT="K";;
        2) USEDUNIT="M";;
        3) USEDUNIT="G";;
    esac

    SCALE=0

    while [[ $(bc <<<"$TOTAL >= 1024") -eq 1 ]]
    do
        TOTAL=$(bc <<<"scale=2; $TOTAL / 1024")
        SCALE=$((SCALE+1))
    done

    case $SCALE in
        1) TOTALUNIT="K";;
        2) TOTALUNIT="M";;
        3) TOTALUNIT="G";;
    esac



    echo "RAM: ${PERCENT}% ${USED}${USEDUNIT}B/${TOTAL}${TOTALUNIT}B"
}

function get_external_ip {
    vpn_name="$(systemctl list-units --plain --state=active | grep openvpn-client@ | awk '{print $1}' | sed -e 's/openvpn-client@//' -e 's/.service//')"

    externalIp="$(dig +short myip.opendns.com @resolver1.opendns.com)"

    if [[ -z "$externalIp" ]] || [[ $(expr match "$externalIp" "[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}") -eq 0 ]]
    then
        echo "0.0.0.0"
    fi

    lock=""

    if [[ -n "$vpn_name" ]]
    then
        lock=""
    fi

    echo $lock $externalIp $vpn_name
}

function interval_check () {
    [[ $[ $updatecount % $1 ] -eq 0 ]]
}

while true
do

    workspace="$(get_workspace)"
    clock="$(get_clock)"
    
    if interval_check 5
    then
        uptime_data="$(get_uptime_data)"
        cpu_load="$(get_cpu_load)"
        memory="$(get_memory)"
    fi

    if interval_check 30
    then
        netdata="$(get_external_ip)"
    fi

    echo -e "   Workspace: ${workspace}%{r} ${netdata} |  ${memory} | ${cpu_load} | ${uptime_data} | ${clock}   "
    updatecount=$[ $updatecount + 1 ]
    sleep 1
done
