#!/bin/env bash
#
# i3blocks integration with dunst.
# Author: Vivien Didelot <vivien.didelot@gmail.com>
#
# dunst caches a notification and signals i3blocks.
# i3blocks catches the signal and prints the cached notification.
#
# Put this rule at the end of your ~/.config/dunst/dunstrc:
#
#     [i3blocks]
#         summary = "*"
#         script = FULL_PATH_OF_THIS_SCRIPT
#
# Add this block in your ~/.i3blocks.conf:
#
#     [dunst]
#     command=THIS_SCRIPT
#     signal=12

cache_file=~/.cache/i3blocks/notification
index_file=~/.cache/i3blocks/notification-index
list_file=~/.cache/i3blocks/notification-list
rofi_cmd=~/.config/i3/bin/make-menu

action=${1:-display}
echo "notificaion action: $action" >/dev/stderr

color_appname="#a9a999"
color_count="#6c6c6c"

color_low="#83b3a3"
symbol_low=""

color_normal="#7f9f7f"
symbol_normal=""

color_critical="#dba3a3"
symbol_critical=""

# limit for total message length, based on screen size here
disp_size="$(xrandr | grep ' connected \(primary \)\?[0-9]' | sed 's/.* \([0-9]\+x[0-9]\+\).*/\1/')"

if [[ "$disp_size" = "2560x1080" ]]
then
    msg_limit=600
else
    msg_limit=320
fi

# limit for app name length, tries to truncate APPNAME first to get
# unter msg_limit
app_limit=16

# Ensure the cache exists
mkdir -p $(dirname "$cache_file")
touch "$cache_file"
touch "$index_file"

index="$(cat $index_file)"
if [[ -z "$index" ]]
then
    index=1 # actually a line number, don't yell at me
    echo "$index" > "$index_file"
fi

function cleanstring {
    sed -e "s/'/'\"'\"'/g" \
        -e 's/&/and/g' \
        -e ':a;N;$!ba;s/\n/ - /g' <<<"$1"
}

# echo "newvar='$(cleanstring "$1")'"> /tmp/notify-test
# cat /tmp/notify-test
# source <(sed -n 1p /tmp/notify-test)
# echo $newvar
# exit

function showlist {
    cp /dev/null "$list_file"
    while read line
    do
        (eval "$line" && echo -e "$APPNAME - $SUMMARY - $BODY" >> "$list_file")
    done <"$cache_file"
    cat "$list_file" | $rofi_cmd -p 'type "clear" and C-Enter to clear all: '
}

function clearall {
    cp /dev/null "$cache_file"
}


# get total count, for possible clearing
total_notifications=$(wc -l "$cache_file" | awk '{print $1}')

# clear notification on click
[[ "$action" == "remove" ]] && sed -i "${index}d" "$cache_file" && exit
# clear all on right click
[[ "$action" == "clear" ]] && clearall && exit
# display all on middle click
if [[ "$action" == "popup" ]]
then
    response="$(showlist)"
    if [[ "$response" = "clear" ]]
    then
        clearall
    fi
    exit
fi

# get total count, reset index if necessary
total_notifications=$(wc -l "$cache_file" | awk '{print $1}')

# if no notifications, just exit here
if [[ "$total_notifications" -eq 0 ]]
then
    echo ""
    exit
fi

if [[ "$index" -gt "$total_notifications" ]]
then
    index="$total_notifications"
    echo "$index" > "$index_file"
fi


# change index on scroll
if [[ "$action" == "next" ]]
then
    index=$[$index-1]
    echo "$index" > "$index_file"
    exit
elif [[ "$action" == "previous" ]]
then
    index=$[$index+1]
    echo "$index" > "$index_file"
    exit
fi

if [[ "$index" -gt "$total_notifications" ]]
then
    index="$total_notifications"
elif [[ "$index" -lt 1 ]]
then
    index=1
fi
echo "$index" > "$index_file"


# source the notification
source <(sed -n ${index}p $cache_file)

case "$URGENCY" in
    LOW)
        color="$color_low"
        symbol="$symbol_low"
        ;;
    NORMAL)
        color="$color_normal"
        symbol="$symbol_normal"
        ;;
    CRITICAL)
        color="$color_critical"
        symbol="$symbol_critical"
        ;;
    *)
        # unknown urgency, certainly empty notification
        exit 0
        ;;
esac

full_text="<span color='$color_appname'>$APPNAME</span> <span color='$color'><b>$SUMMARY</b></span> $BODY"

if [[ $total_notifications -gt 1 ]]
then
    full_text="<span color='$color_count'>($index/$total_notifications)</span> $full_text"
fi

# limit for total message length, based on screen size here
# disp_size="$(xrandr | grep ' connected \(primary \)\?[0-9]' | sed 's/.* \([0-9]\+x[0-9]\+\).*/\1/')"

# if [[ "$disp_size" = "2560x1080" ]]
# then
#     msg_limit=363
# else
#     msg_limit=100
# fi
# printf "<span color='#4c4c4c'>| </span>%-${msg_limit}s" "<span color='$color'>$symbol</span> $full_text"

# Output the status block
echo "<span color='#4c4c4c'> |  </span><span color='$color'>$symbol</span> $full_text"



